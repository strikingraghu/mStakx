4 >> Deploy guest-book application (or any other application which you think is more suitable to showcase your
ability, kindly justify why you have chosen a different application) in the development namespace.

Solution -
To check the version, enter kubectl version



Start up the Redis Master
kubectl apply -f https://k8s.io/examples/application/guestbook/redis-master-deployment.yaml

Get PODs -
kubectl get pods

The response should be similar to this:

  NAME                            READY     STATUS    RESTARTS   AGE
  redis-master-1068406935-3lswp   1/1       Running   0          28s




Creating the Redis Master Service
kubectl apply -f https://k8s.io/examples/application/guestbook/redis-master-service.yaml

Query the list of Services to verify that the Redis Master Service is running:
kubectl get service

The response should be similar to this:

  NAME           TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE
  kubernetes     ClusterIP   10.0.0.1     <none>        443/TCP    1m
  redis-master   ClusterIP   10.0.0.151   <none>        6379/TCP   8s





Start up the Redis Slaves
kubectl apply -f https://k8s.io/examples/application/guestbook/redis-slave-deployment.yaml

Query the list of Pods to verify that the Redis Slave Pods are running:
kubectl get pods

The response should be similar to this:

  NAME                            READY     STATUS              RESTARTS   AGE
  redis-master-1068406935-3lswp   1/1       Running             0          1m
  redis-slave-2005841000-fpvqc    0/1       ContainerCreating   0          6s
  redis-slave-2005841000-phfv9    0/1       ContainerCreating   0          6s



Creating the Redis Slave Service
kubectl apply -f https://k8s.io/examples/application/guestbook/redis-slave-service.yaml

Query the list of Services to verify that the Redis slave service is running:
kubectl get services

The response should be similar to this:

  NAME           TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE
  kubernetes     ClusterIP   10.0.0.1     <none>        443/TCP    2m
  redis-master   ClusterIP   10.0.0.151   <none>        6379/TCP   1m
  redis-slave    ClusterIP   10.0.0.223   <none>        6379/TCP   6s



Set up and Expose the Guestbook Frontend
kubectl apply -f https://k8s.io/examples/application/guestbook/frontend-deployment.yaml

Query the list of Pods to verify that the three frontend replicas are running:
kubectl get pods -l app=guestbook -l tier=frontend

The response should be similar to this:

  NAME                        READY     STATUS    RESTARTS   AGE
  frontend-3823415956-dsvc5   1/1       Running   0          54s
  frontend-3823415956-k22zn   1/1       Running   0          54s
  frontend-3823415956-w9gbt   1/1       Running   0          54s




Creating the Frontend Service
kubectl apply -f https://k8s.io/examples/application/guestbook/frontend-service.yaml

Query the list of Services to verify that the frontend Service is running:
kubectl get services

The response should be similar to this:

  NAME           TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE
  frontend       NodePort    10.0.0.112   <none>       80:31323/TCP   6s
  kubernetes     ClusterIP   10.0.0.1     <none>        443/TCP        4m
  redis-master   ClusterIP   10.0.0.151   <none>        6379/TCP       2m
  redis-slave    ClusterIP   10.0.0.223   <none>        6379/TCP       1m



Viewing the Frontend Service via NodePort
If you deployed this application to Minikube or a local cluster, you need to find the IP address to view your Guestbook.

Run the following command to get the IP address for the frontend Service.
minikube service frontend --url

The response should be similar to this:
http://192.168.99.100:31323
Copy the IP address, and load the page in your browser to view your guestbook.
